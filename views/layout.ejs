<!DOCTYPE html>
<html>
  <head>
    <title>New Sails App</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bootstrap.css">
    <link rel="stylesheet" href="/styles/style.css">
    <!--STYLES END-->
  </head>

  <body>
  <div class="navbar navbar-inverse navbar-fixed-top">
    <div class="container">

    <div class="navbar-header">
      <button type="button" data-toggle="collapse" data-target="#navbar-collapse" class="navbar-toggle collapsed">
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a href="/" class="navbar-brand">MyApp</a>
    </div>

    <div class="navbar-collapse collapse" id="navbar-collapse">
      <ul class="nav navbar-nav">
        <% if(req.session.access){ %>
        <li><a href="/user/readF/<%= req.session.User.username%>"><%= req.session.User.username %></a></li>
          <% if (req.session.User.admin){ %>
        <li><a href="/user">User Administration</a></li>
          <% } %>
        <% } %>
      </ul>
    <div class="navbar-right">
        <% if(req.session.access){ %>
        <a href="/session/destroy" class="btn btn-primary navbar-btn navbar-right">Log Out</a>
      <% } %>
    </div>
<% if(!req.session.access){ %>
  <form action="/session/create" method="POST" class="navbar-form navbar-right">
    <div class="form-group">
      <input type="text" placeholder="username" class="form-control" name="username">
    </div>
    <div class="form-group">
      <input type="password" placeholder="password" class="form-control" name="password">
    </div>
    <button class="btn btn-primary">Log In</button>
    <input type="hidden" value="<%= _csrf %>" name="_csrf"/>
  </form>
  <% } %>
    </div>
    </div>
  </div>


    <%- body %>

<div class="container">
  <hr>
  <footer class="footer">
    <div class="pull-right">
      <a href="http://sailsjs.com">sails.js</a>
      <div>tutorial by irl...</div>
    </div>
  </footer>
</div>

    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/jquery-min.js"></script>
    <script src="/js/dependencies/bootstrap.js"></script>
    <script src="/js/dependencies/jquery.validate.js"></script>
    <script src="/js/app.js"></script>
    <script src="/js/validateCreateUpdate.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
